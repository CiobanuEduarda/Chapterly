// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Existing Book model
model Book {
  id        Int      @id @default(autoincrement())
  title     String
  author    String
  genre     String
  price     Float
  rating    Int
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  userId    Int
  user      User     @relation(fields: [userId], references: [id])

  // New relationships
  reviews   Review[]
  categories BookCategory[]

  @@map("books")
  @@index([title])
  @@index([author])
  @@index([genre])
  @@index([rating])
  @@index([price])
}

// New Review model
model Review {
  id        Int      @id @default(autoincrement())
  content   String
  rating    Int      @db.SmallInt
  bookId    Int      @map("book_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relationships
  book      Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)

  @@map("reviews")
  @@index([bookId])
  @@index([rating])
}

// New Category model
model Category {
  id          Int           @id @default(autoincrement())
  name        String        @unique
  description String?
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")

  // Relationships
  books       BookCategory[]

  @@map("categories")
  @@index([name])
}

// Junction table for many-to-many relationship between Book and Category
model BookCategory {
  bookId     Int      @map("book_id")
  categoryId Int      @map("category_id")
  createdAt  DateTime @default(now()) @map("created_at")

  // Relationships
  book       Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([bookId, categoryId])
  @@map("book_categories")
  @@index([bookId])
  @@index([categoryId])
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String
  role      String   @default("USER")
  books     Book[]
  logs      Log[]
  monitored MonitoredUser?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Log {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  action    String
  entity    String
  entityId  Int?
  timestamp DateTime @default(now())
}

model MonitoredUser {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id])
  reason    String
  createdAt DateTime @default(now())
}
